https://kbroman.org/github_tutorial/pages/init.html


https://help.github.com/en/github/using-git/ignoring-files




Git NOTES!!!!

Ok I've finally decided to record the process of adding a respository to git hub.

If you already have a project prepared you have to ensure a few things.
    1.It is using a package manager npm. You can do this by running {npm init}
    2.Git also have to be on it as well. You can do this by running {git init}
        a.Make sure that you add the "node_modules" folder is added to {.gitignore}
            (Just add the folder name within the file.)
        b.If you don't have a .gitignore, you can create one within Visual Studio Code. 
            (Just create a file and name it {.gitignore})

Once you've ensured that these are present and functioning you can move on.

Next you have to create a git respository on your git account.

Once that is complete:
    
    
    //Follow the rest of these instructions//
    https://kbroman.org/github_tutorial/pages/init.html







NPM NOTES
To update packages run this command

    npm update packageName --save






Heroku Notes:

First I had to navigate to the main website for heroku, then I login.

Next I clicked the node.js option which took me to the page below:
    https://devcenter.heroku.com/articles/getting-started-with-nodejs

Once here, I went to the top navigation and clicked on "Documentation"
    https://devcenter.heroku.com/categories/reference

Next I clicked "Deploying with Git" link under "Deployment"
    https://devcenter.heroku.com/articles/git


Here I have to ensure that Git and "Heroku CLI" are installed.
***Dont install Heroku CLI through npm, INSTEAD install it through the installer they provide for windows.***






Git remotes are versions of your repository that live on other servers. 
You deploy your app by pushing its code to a special Heroku-hosted remote
that’s associated with your app.

So in other words, "git remote -v" shows all the locations of your code through git.
Origin is the default location of you project files, which can be found on github. That's
where you would see the master branch and all the other branches of the project.


https://stackoverflow.com/questions/56047981/node-js-heroku-deployment-on-mac-sh-1-nodemon-not-found-npm-err-nodemon
https://www.freecodecamp.org/news/how-to-deploy-a-react-app-with-an-express-server-on-heroku-32244fe5a250/




IF you already have an app and you want to load it to another computer, then follow these steps:
    1. Go to the project folder in the terminal and type "git remote -v". This will show you if that
        project is already connected to heroku. If it's not, then continue.
    2.Use the heroku git:remote command. All you need is your Heroku app’s name:

        heroku git:remote -a herokuAppName
        set git remote heroku to https://git.heroku.com/thawing-inlet-61413.git









Here is where my server is being stored:
https://damp-scrubland-25913.herokuapp.com/



If you've made a change to any files within the project folder, then follow these steps:

    git status
    git add .
    git commit -This is the short hand to committing a file without the comments. Just delete the what you 
        don't need out of it.
    git push - This pushes your files to the default project folder in git hub.
    git push heroku master - This tells git where to push your files.

    heroku open    - This shows where your site is being hosted.




    heroku addons - This shows all the addons you have connected to the server/app.
    heroku pg:psql -This connects to the database

POSTGRESQL WINDOWS NOTES!!!
Psql is built as a “console application”. Since the Windows console windows use a different encoding than the rest of the system, you must take special care when using 8-bit characters within psql. If psql detects a problematic console code page, it will warn you at startup. To change the console code page, two things are necessary:
Set the code page by entering cmd.exe /c chcp 1252. (1252 is a code page that is appropriate for German; replace it with your value.) If you are using Cygwin, you can put this command in /etc/profile.
Set the console font to Lucida Console, because the raster font does not work with the ANSI code page.
    
    {cmd.exe /c chcp 1252}

https://www.postgresql.org/docs/current/app-psql.html





When creating systems, it's best practice to log each stage in the system,
whether that stage is passed or not. This reveals what's happening behind the
scenes.









Probability

There are 2 types of probability":
    +Empirical - Something we can observe in actual data. It has some uncertanity. This is a good estemation of a theoretical
    +Theoretical - Is more of a ideal or truth out there that we can't directly see.



Count the number of times you win by the number of times you've played.
games = 100
won = 6
chances;

won/games = chances


Addition rule of probability
If you have a bag of skittles with 5 differect colors, and there are 20% per color.
Then the probability of you getting either color is 20% and the probability of you getting red and green will
be the SUM of both of their probabilities.

The odds of you rolling a 6 on a die, and fliping a tails on a coin goes as follows:
Equasion
    P(tails or 6) = P(tails) + P(6) - P( tails and 6)

    we subtract at the end because if we didn't then we would have been double counting them. try it and see.


Muitiplaction rule
If Emmie visits church 20% within a year, and there's a 10% chance that church will give away money.
The odds of that happening are:

    P(Emmie) = 20% or .2
    P(money) = 10% or .1

    P(Emmie) * P(money) = .02 or 2%

So I'm geting 10% of 20% which will be 2%

The equasion of getting either are:
    P(Emmie) + P(money) - P(Emmie and money) = .28 or 28%




Independent Events
If the probability of one event occurring is NOT CHANGED by
whether of not the second Event occurred.

Independent event can happen at the same time. So there can 
be some over lapping if you are not careful.




 So with dominos, probabilities are ran by each event and the data it collects from those events.


 Conditional Events
 P(EVENT 1 | EVENT 2)
 EVENT 1 was determined by EVENT 2 happening.

 So the probability of event 2 happening also determined the probability of Event 1.
 So that means that 
    if E2 = 20%
    then E2 will represent the whole number or 100%. Why because the 20% became the floor for E1

    if E1 = 50% of E2
    then the probability of E2 happening then E1 is the following equasion:
        E2 * .5 = E1

    So E2 = 20%;
       E1 = E2 * .5;


P(2|1) = P(2|1) / P(1)



How do I predict the probability of persons having cards or not?
I have to collect event data.
I have to actually play through a game.

So the first place to start is to learn how to collect data.


We can determine the end:
    If the cards in person's hands becomes empty first. This will be the win event for that player.
    If no one else can play, then the total of the last player that played will be compared by the 
    total of the player to their left, and the lowest wins.



I need to divide the cards between the hands first. So I need to create that.





















What did I learn?
    I noticed that the first hand is random but that's about it. With each following hand, the numbers become less random.
    Then all the cards are not showing up on the board.






What will I do?
    I can create computers that automaticly deal out the cards.
        I will have to create turns for each computer.
    I have to create turns before I can create anything else because 
    inorder for the law of probabilities to be applied, the conditions
    need to be first.

    So I need to create the game and have winners and losers.
    So how can I break this down into steps?
        I need to create player turns:
            I need to ristrict the other players from playing when it's a player's turn.
            If the player don't have any cards that can be played, then a notification will appear 
            telling them they can't play.
        I need to define what winning looks like.
        











I want to create the probability logic now. How do I go about this?
Ultimately it's just a card counter if you think about it...My first design
accomplished this.












export let deck = [
    [0, 0],
    [0, 1],
    [0, 2],
    [0, 3],
    [0, 4],
    [0, 5],
    [0, 6],
    [1, 1],
    [1, 2],
    [1, 3],
    [1, 4],
    [1, 5],
    [1, 6],
    [2, 2],
    [2, 3],
    [2, 4],
    [2, 5],
    [2, 6],
    [3, 3],
    [3, 4],
    [3, 5],
    [3, 6],
    [4, 4],
    [4, 5],
    [4, 6],
    [5, 5],
    [5, 6],
    [6, 6]
];